directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Comment implements Node {
  id: ID!
  context: String!
  createdAt: Time!
  owner: [User!]
  post(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Posts returned from the connection."""
    orderBy: PostOrder
  ): PostConnection!
  likes: [Like!]
}
"""A connection to a list of items."""
type CommentConnection {
  """A list of edges."""
  edges: [CommentEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type CommentEdge {
  """The item at the end of the edge."""
  node: Comment
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Comment connections"""
input CommentOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Comments."""
  field: CommentOrderField!
}
"""Properties by which Comment connections can be ordered."""
enum CommentOrderField {
  CREATED_AT
}
"""
CreateCommentInput is used for create Comment object.
Input was generated by ent.
"""
input CreateCommentInput {
  context: String!
  createdAt: Time
  ownerIDs: [ID!]
  postIDs: [ID!]
  likeIDs: [ID!]
}
"""
CreatePostInput is used for create Post object.
Input was generated by ent.
"""
input CreatePostInput {
  title: String!
  context: String!
  createdAt: Time
  hashtagIDs: [ID!]
  likeIDs: [ID!]
  commentIDs: [ID!]
  ownerID: ID
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  username: String!
  password: String!
  location: String
  uploadImg: String
  isAdmin: Boolean
  createdAt: Time
  postIDs: [ID!]
  likeIDs: [ID!]
  commentIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Hashtag implements Node {
  id: ID!
  hashtag: String!
  createdAt: Time!
  posts: [Post!]
}
type Like implements Node {
  id: ID!
  createdAt: Time!
  posts: [Post!]
  owner: [User!]
  comments: [Comment!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/MangoSteen0903/go-blog-graphql/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Post implements Node {
  id: ID!
  title: String!
  context: String!
  createdAt: Time!
  hashtags: [Hashtag!]
  likes: [Like!]
  comments(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Comments returned from the connection."""
    orderBy: CommentOrder
  ): CommentConnection!
  owner: User
}
"""A connection to a list of items."""
type PostConnection {
  """A list of edges."""
  edges: [PostEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type PostEdge {
  """The item at the end of the edge."""
  node: Post
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Post connections"""
input PostOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Posts."""
  field: PostOrderField!
}
"""Properties by which Post connections can be ordered."""
enum PostOrderField {
  CREATED_AT
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  comments(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Comments returned from the connection."""
    orderBy: CommentOrder
  ): CommentConnection!
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Posts returned from the connection."""
    orderBy: PostOrder
  ): PostConnection!
  users(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Users returned from the connection."""
    orderBy: UserOrder
  ): UserConnection!
}
"""The builtin Time type"""
scalar Time
"""
UpdateCommentInput is used for update Comment object.
Input was generated by ent.
"""
input UpdateCommentInput {
  context: String
  createdAt: Time
  addOwnerIDs: [ID!]
  removeOwnerIDs: [ID!]
  addPostIDs: [ID!]
  removePostIDs: [ID!]
  addLikeIDs: [ID!]
  removeLikeIDs: [ID!]
}
"""
UpdatePostInput is used for update Post object.
Input was generated by ent.
"""
input UpdatePostInput {
  title: String
  context: String
  createdAt: Time
  addHashtagIDs: [ID!]
  removeHashtagIDs: [ID!]
  addLikeIDs: [ID!]
  removeLikeIDs: [ID!]
  addCommentIDs: [ID!]
  removeCommentIDs: [ID!]
  clearOwner: Boolean
  ownerID: ID
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  username: String
  password: String
  clearLocation: Boolean
  location: String
  clearUploadImg: Boolean
  uploadImg: String
  isAdmin: Boolean
  createdAt: Time
  addPostIDs: [ID!]
  removePostIDs: [ID!]
  addLikeIDs: [ID!]
  removeLikeIDs: [ID!]
  addCommentIDs: [ID!]
  removeCommentIDs: [ID!]
}
type User implements Node {
  id: ID!
  username: String!
  password: String!
  location: String
  uploadImg: String
  isAdmin: Boolean!
  createdAt: Time!
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Posts returned from the connection."""
    orderBy: PostOrder
  ): PostConnection!
  likes: [Like!]
  comments(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Comments returned from the connection."""
    orderBy: CommentOrder
  ): CommentConnection!
}
"""A connection to a list of items."""
type UserConnection {
  """A list of edges."""
  edges: [UserEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for User connections"""
input UserOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Users."""
  field: UserOrderField!
}
"""Properties by which User connections can be ordered."""
enum UserOrderField {
  CREATED_AT
}
