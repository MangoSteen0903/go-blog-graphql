directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
CreatePostInput is used for create Post object.
Input was generated by ent.
"""
input CreatePostInput {
  title: String!
  context: String!
  createdAt: Time
  hashtagIDs: [ID!]
  likeIDs: [ID!]
  ownerID: ID
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  username: String!
  password: String!
  location: String
  uploadImg: String
  isAdmin: Boolean
  createdAt: Time
  postIDs: [ID!]
  likeIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Hashtag implements Node {
  id: ID!
  hashtag: String!
  createdAt: Time!
  posts: [Post!]
}
type Like implements Node {
  id: ID!
  createdAt: Time!
  posts: [Post!]
  owner: [User!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/MangoSteen0903/go-blog-graphql/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Post implements Node {
  id: ID!
  title: String!
  context: String!
  createdAt: Time!
  hashtags: [Hashtag!]
  likes: [Like!]
  owner: User
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  posts: [Post!]!
  users: [User!]!
}
"""The builtin Time type"""
scalar Time
"""
UpdatePostInput is used for update Post object.
Input was generated by ent.
"""
input UpdatePostInput {
  title: String
  context: String
  createdAt: Time
  addHashtagIDs: [ID!]
  removeHashtagIDs: [ID!]
  addLikeIDs: [ID!]
  removeLikeIDs: [ID!]
  clearOwner: Boolean
  ownerID: ID
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  username: String
  password: String
  clearLocation: Boolean
  location: String
  clearUploadImg: Boolean
  uploadImg: String
  isAdmin: Boolean
  createdAt: Time
  addPostIDs: [ID!]
  removePostIDs: [ID!]
  addLikeIDs: [ID!]
  removeLikeIDs: [ID!]
}
type User implements Node {
  id: ID!
  username: String!
  password: String!
  location: String
  uploadImg: String
  isAdmin: Boolean!
  createdAt: Time!
  posts: [Post!]
  likes: [Like!]
}
