// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/MangoSteen0903/go-blog-graphql/ent/comment"
)

// Comment is the model entity for the Comment schema.
type Comment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Context holds the value of the "Context" field.
	Context string `json:"Context,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CommentQuery when eager-loading is set.
	Edges CommentEdges `json:"edges"`
}

// CommentEdges holds the relations/edges for other nodes in the graph.
type CommentEdges struct {
	// Owner holds the value of the owner edge.
	Owner []*User `json:"owner,omitempty"`
	// Post holds the value of the post edge.
	Post []*Post `json:"post,omitempty"`
	// Likes holds the value of the Likes edge.
	Likes []*Like `json:"Likes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedOwner map[string][]*User
	namedPost  map[string][]*Post
	namedLikes map[string][]*Like
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading.
func (e CommentEdges) OwnerOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// PostOrErr returns the Post value or an error if the edge
// was not loaded in eager-loading.
func (e CommentEdges) PostOrErr() ([]*Post, error) {
	if e.loadedTypes[1] {
		return e.Post, nil
	}
	return nil, &NotLoadedError{edge: "post"}
}

// LikesOrErr returns the Likes value or an error if the edge
// was not loaded in eager-loading.
func (e CommentEdges) LikesOrErr() ([]*Like, error) {
	if e.loadedTypes[2] {
		return e.Likes, nil
	}
	return nil, &NotLoadedError{edge: "Likes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Comment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case comment.FieldID:
			values[i] = new(sql.NullInt64)
		case comment.FieldContext:
			values[i] = new(sql.NullString)
		case comment.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Comment", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Comment fields.
func (c *Comment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case comment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case comment.FieldContext:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Context", values[i])
			} else if value.Valid {
				c.Context = value.String
			}
		case comment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryOwner queries the "owner" edge of the Comment entity.
func (c *Comment) QueryOwner() *UserQuery {
	return (&CommentClient{config: c.config}).QueryOwner(c)
}

// QueryPost queries the "post" edge of the Comment entity.
func (c *Comment) QueryPost() *PostQuery {
	return (&CommentClient{config: c.config}).QueryPost(c)
}

// QueryLikes queries the "Likes" edge of the Comment entity.
func (c *Comment) QueryLikes() *LikeQuery {
	return (&CommentClient{config: c.config}).QueryLikes(c)
}

// Update returns a builder for updating this Comment.
// Note that you need to call Comment.Unwrap() before calling this method if this Comment
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Comment) Update() *CommentUpdateOne {
	return (&CommentClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Comment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Comment) Unwrap() *Comment {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Comment is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Comment) String() string {
	var builder strings.Builder
	builder.WriteString("Comment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("Context=")
	builder.WriteString(c.Context)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedOwner returns the Owner named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Comment) NamedOwner(name string) ([]*User, error) {
	if c.Edges.namedOwner == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedOwner[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Comment) appendNamedOwner(name string, edges ...*User) {
	if c.Edges.namedOwner == nil {
		c.Edges.namedOwner = make(map[string][]*User)
	}
	if len(edges) == 0 {
		c.Edges.namedOwner[name] = []*User{}
	} else {
		c.Edges.namedOwner[name] = append(c.Edges.namedOwner[name], edges...)
	}
}

// NamedPost returns the Post named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Comment) NamedPost(name string) ([]*Post, error) {
	if c.Edges.namedPost == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedPost[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Comment) appendNamedPost(name string, edges ...*Post) {
	if c.Edges.namedPost == nil {
		c.Edges.namedPost = make(map[string][]*Post)
	}
	if len(edges) == 0 {
		c.Edges.namedPost[name] = []*Post{}
	} else {
		c.Edges.namedPost[name] = append(c.Edges.namedPost[name], edges...)
	}
}

// NamedLikes returns the Likes named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Comment) NamedLikes(name string) ([]*Like, error) {
	if c.Edges.namedLikes == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedLikes[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Comment) appendNamedLikes(name string, edges ...*Like) {
	if c.Edges.namedLikes == nil {
		c.Edges.namedLikes = make(map[string][]*Like)
	}
	if len(edges) == 0 {
		c.Edges.namedLikes[name] = []*Like{}
	} else {
		c.Edges.namedLikes[name] = append(c.Edges.namedLikes[name], edges...)
	}
}

// Comments is a parsable slice of Comment.
type Comments []*Comment

func (c Comments) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
