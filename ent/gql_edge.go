// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (c *Comment) Owner(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedOwner(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.OwnerOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryOwner().All(ctx)
	}
	return result, err
}

func (c *Comment) Post(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *PostOrder,
) (*PostConnection, error) {
	opts := []PostPaginateOption{
		WithPostOrder(orderBy),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := c.Edges.totalCount[1][alias]
	if nodes, err := c.NamedPost(alias); err == nil || hasTotalCount {
		pager, err := newPostPager(opts)
		if err != nil {
			return nil, err
		}
		conn := &PostConnection{Edges: []*PostEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return c.QueryPost().Paginate(ctx, after, first, before, last, opts...)
}

func (c *Comment) Likes(ctx context.Context) (result []*Like, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedLikes(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.LikesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryLikes().All(ctx)
	}
	return result, err
}

func (h *Hashtag) Posts(ctx context.Context) (result []*Post, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = h.NamedPosts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = h.Edges.PostsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = h.QueryPosts().All(ctx)
	}
	return result, err
}

func (l *Like) Posts(ctx context.Context) (result []*Post, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = l.NamedPosts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = l.Edges.PostsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = l.QueryPosts().All(ctx)
	}
	return result, err
}

func (l *Like) Owner(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = l.NamedOwner(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = l.Edges.OwnerOrErr()
	}
	if IsNotLoaded(err) {
		result, err = l.QueryOwner().All(ctx)
	}
	return result, err
}

func (l *Like) Comments(ctx context.Context) (result []*Comment, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = l.NamedComments(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = l.Edges.CommentsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = l.QueryComments().All(ctx)
	}
	return result, err
}

func (po *Post) Hashtags(ctx context.Context) (result []*Hashtag, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = po.NamedHashtags(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = po.Edges.HashtagsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = po.QueryHashtags().All(ctx)
	}
	return result, err
}

func (po *Post) Likes(ctx context.Context) (result []*Like, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = po.NamedLikes(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = po.Edges.LikesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = po.QueryLikes().All(ctx)
	}
	return result, err
}

func (po *Post) Comments(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *CommentOrder,
) (*CommentConnection, error) {
	opts := []CommentPaginateOption{
		WithCommentOrder(orderBy),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := po.Edges.totalCount[2][alias]
	if nodes, err := po.NamedComments(alias); err == nil || hasTotalCount {
		pager, err := newCommentPager(opts)
		if err != nil {
			return nil, err
		}
		conn := &CommentConnection{Edges: []*CommentEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return po.QueryComments().Paginate(ctx, after, first, before, last, opts...)
}

func (po *Post) Owner(ctx context.Context) (*User, error) {
	result, err := po.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = po.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (u *User) Posts(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *PostOrder,
) (*PostConnection, error) {
	opts := []PostPaginateOption{
		WithPostOrder(orderBy),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := u.Edges.totalCount[0][alias]
	if nodes, err := u.NamedPosts(alias); err == nil || hasTotalCount {
		pager, err := newPostPager(opts)
		if err != nil {
			return nil, err
		}
		conn := &PostConnection{Edges: []*PostEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return u.QueryPosts().Paginate(ctx, after, first, before, last, opts...)
}

func (u *User) Likes(ctx context.Context) (result []*Like, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedLikes(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.LikesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryLikes().All(ctx)
	}
	return result, err
}

func (u *User) Comments(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *CommentOrder,
) (*CommentConnection, error) {
	opts := []CommentPaginateOption{
		WithCommentOrder(orderBy),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := u.Edges.totalCount[2][alias]
	if nodes, err := u.NamedComments(alias); err == nil || hasTotalCount {
		pager, err := newCommentPager(opts)
		if err != nil {
			return nil, err
		}
		conn := &CommentConnection{Edges: []*CommentEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return u.QueryComments().Paginate(ctx, after, first, before, last, opts...)
}
