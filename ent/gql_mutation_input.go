// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"
)

// CreateCommentInput represents a mutation input for creating comments.
type CreateCommentInput struct {
	Context   string
	CreatedAt *time.Time
	OwnerIDs  []int
	PostIDs   []int
	LikeIDs   []int
}

// Mutate applies the CreateCommentInput on the CommentMutation builder.
func (i *CreateCommentInput) Mutate(m *CommentMutation) {
	m.SetContext(i.Context)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.OwnerIDs; len(v) > 0 {
		m.AddOwnerIDs(v...)
	}
	if v := i.PostIDs; len(v) > 0 {
		m.AddPostIDs(v...)
	}
	if v := i.LikeIDs; len(v) > 0 {
		m.AddLikeIDs(v...)
	}
}

// SetInput applies the change-set in the CreateCommentInput on the CommentCreate builder.
func (c *CommentCreate) SetInput(i CreateCommentInput) *CommentCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCommentInput represents a mutation input for updating comments.
type UpdateCommentInput struct {
	Context        *string
	CreatedAt      *time.Time
	AddOwnerIDs    []int
	RemoveOwnerIDs []int
	AddPostIDs     []int
	RemovePostIDs  []int
	AddLikeIDs     []int
	RemoveLikeIDs  []int
}

// Mutate applies the UpdateCommentInput on the CommentMutation builder.
func (i *UpdateCommentInput) Mutate(m *CommentMutation) {
	if v := i.Context; v != nil {
		m.SetContext(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.AddOwnerIDs; len(v) > 0 {
		m.AddOwnerIDs(v...)
	}
	if v := i.RemoveOwnerIDs; len(v) > 0 {
		m.RemoveOwnerIDs(v...)
	}
	if v := i.AddPostIDs; len(v) > 0 {
		m.AddPostIDs(v...)
	}
	if v := i.RemovePostIDs; len(v) > 0 {
		m.RemovePostIDs(v...)
	}
	if v := i.AddLikeIDs; len(v) > 0 {
		m.AddLikeIDs(v...)
	}
	if v := i.RemoveLikeIDs; len(v) > 0 {
		m.RemoveLikeIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateCommentInput on the CommentUpdate builder.
func (c *CommentUpdate) SetInput(i UpdateCommentInput) *CommentUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCommentInput on the CommentUpdateOne builder.
func (c *CommentUpdateOne) SetInput(i UpdateCommentInput) *CommentUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreatePostInput represents a mutation input for creating posts.
type CreatePostInput struct {
	Title      string
	Context    string
	CreatedAt  *time.Time
	HashtagIDs []int
	LikeIDs    []int
	CommentIDs []int
	OwnerID    *int
}

// Mutate applies the CreatePostInput on the PostMutation builder.
func (i *CreatePostInput) Mutate(m *PostMutation) {
	m.SetTitle(i.Title)
	m.SetContext(i.Context)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.HashtagIDs; len(v) > 0 {
		m.AddHashtagIDs(v...)
	}
	if v := i.LikeIDs; len(v) > 0 {
		m.AddLikeIDs(v...)
	}
	if v := i.CommentIDs; len(v) > 0 {
		m.AddCommentIDs(v...)
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
}

// SetInput applies the change-set in the CreatePostInput on the PostCreate builder.
func (c *PostCreate) SetInput(i CreatePostInput) *PostCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePostInput represents a mutation input for updating posts.
type UpdatePostInput struct {
	Title            *string
	Context          *string
	CreatedAt        *time.Time
	AddHashtagIDs    []int
	RemoveHashtagIDs []int
	AddLikeIDs       []int
	RemoveLikeIDs    []int
	AddCommentIDs    []int
	RemoveCommentIDs []int
	ClearOwner       bool
	OwnerID          *int
}

// Mutate applies the UpdatePostInput on the PostMutation builder.
func (i *UpdatePostInput) Mutate(m *PostMutation) {
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if v := i.Context; v != nil {
		m.SetContext(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.AddHashtagIDs; len(v) > 0 {
		m.AddHashtagIDs(v...)
	}
	if v := i.RemoveHashtagIDs; len(v) > 0 {
		m.RemoveHashtagIDs(v...)
	}
	if v := i.AddLikeIDs; len(v) > 0 {
		m.AddLikeIDs(v...)
	}
	if v := i.RemoveLikeIDs; len(v) > 0 {
		m.RemoveLikeIDs(v...)
	}
	if v := i.AddCommentIDs; len(v) > 0 {
		m.AddCommentIDs(v...)
	}
	if v := i.RemoveCommentIDs; len(v) > 0 {
		m.RemoveCommentIDs(v...)
	}
	if i.ClearOwner {
		m.ClearOwner()
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
}

// SetInput applies the change-set in the UpdatePostInput on the PostUpdate builder.
func (c *PostUpdate) SetInput(i UpdatePostInput) *PostUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePostInput on the PostUpdateOne builder.
func (c *PostUpdateOne) SetInput(i UpdatePostInput) *PostUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	Username   string
	Password   string
	Location   *string
	UploadImg  *string
	IsAdmin    *bool
	CreatedAt  *time.Time
	PostIDs    []int
	LikeIDs    []int
	CommentIDs []int
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	m.SetUsername(i.Username)
	m.SetPassword(i.Password)
	if v := i.Location; v != nil {
		m.SetLocation(*v)
	}
	if v := i.UploadImg; v != nil {
		m.SetUploadImg(*v)
	}
	if v := i.IsAdmin; v != nil {
		m.SetIsAdmin(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.PostIDs; len(v) > 0 {
		m.AddPostIDs(v...)
	}
	if v := i.LikeIDs; len(v) > 0 {
		m.AddLikeIDs(v...)
	}
	if v := i.CommentIDs; len(v) > 0 {
		m.AddCommentIDs(v...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	Username         *string
	Password         *string
	ClearLocation    bool
	Location         *string
	ClearUploadImg   bool
	UploadImg        *string
	IsAdmin          *bool
	CreatedAt        *time.Time
	AddPostIDs       []int
	RemovePostIDs    []int
	AddLikeIDs       []int
	RemoveLikeIDs    []int
	AddCommentIDs    []int
	RemoveCommentIDs []int
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.Username; v != nil {
		m.SetUsername(*v)
	}
	if v := i.Password; v != nil {
		m.SetPassword(*v)
	}
	if i.ClearLocation {
		m.ClearLocation()
	}
	if v := i.Location; v != nil {
		m.SetLocation(*v)
	}
	if i.ClearUploadImg {
		m.ClearUploadImg()
	}
	if v := i.UploadImg; v != nil {
		m.SetUploadImg(*v)
	}
	if v := i.IsAdmin; v != nil {
		m.SetIsAdmin(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.AddPostIDs; len(v) > 0 {
		m.AddPostIDs(v...)
	}
	if v := i.RemovePostIDs; len(v) > 0 {
		m.RemovePostIDs(v...)
	}
	if v := i.AddLikeIDs; len(v) > 0 {
		m.AddLikeIDs(v...)
	}
	if v := i.RemoveLikeIDs; len(v) > 0 {
		m.RemoveLikeIDs(v...)
	}
	if v := i.AddCommentIDs; len(v) > 0 {
		m.AddCommentIDs(v...)
	}
	if v := i.RemoveCommentIDs; len(v) > 0 {
		m.RemoveCommentIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
