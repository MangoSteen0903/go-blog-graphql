// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/MangoSteen0903/go-blog-graphql/ent/hashtag"
	"github.com/MangoSteen0903/go-blog-graphql/ent/post"
	"github.com/MangoSteen0903/go-blog-graphql/ent/predicate"
)

// HashtagUpdate is the builder for updating Hashtag entities.
type HashtagUpdate struct {
	config
	hooks    []Hook
	mutation *HashtagMutation
}

// Where appends a list predicates to the HashtagUpdate builder.
func (hu *HashtagUpdate) Where(ps ...predicate.Hashtag) *HashtagUpdate {
	hu.mutation.Where(ps...)
	return hu
}

// SetHashtag sets the "hashtag" field.
func (hu *HashtagUpdate) SetHashtag(s string) *HashtagUpdate {
	hu.mutation.SetHashtag(s)
	return hu
}

// AddPostIDs adds the "Posts" edge to the Post entity by IDs.
func (hu *HashtagUpdate) AddPostIDs(ids ...int) *HashtagUpdate {
	hu.mutation.AddPostIDs(ids...)
	return hu
}

// AddPosts adds the "Posts" edges to the Post entity.
func (hu *HashtagUpdate) AddPosts(p ...*Post) *HashtagUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return hu.AddPostIDs(ids...)
}

// Mutation returns the HashtagMutation object of the builder.
func (hu *HashtagUpdate) Mutation() *HashtagMutation {
	return hu.mutation
}

// ClearPosts clears all "Posts" edges to the Post entity.
func (hu *HashtagUpdate) ClearPosts() *HashtagUpdate {
	hu.mutation.ClearPosts()
	return hu
}

// RemovePostIDs removes the "Posts" edge to Post entities by IDs.
func (hu *HashtagUpdate) RemovePostIDs(ids ...int) *HashtagUpdate {
	hu.mutation.RemovePostIDs(ids...)
	return hu
}

// RemovePosts removes "Posts" edges to Post entities.
func (hu *HashtagUpdate) RemovePosts(p ...*Post) *HashtagUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return hu.RemovePostIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hu *HashtagUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(hu.hooks) == 0 {
		affected, err = hu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HashtagMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			hu.mutation = mutation
			affected, err = hu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(hu.hooks) - 1; i >= 0; i-- {
			if hu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = hu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, hu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (hu *HashtagUpdate) SaveX(ctx context.Context) int {
	affected, err := hu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hu *HashtagUpdate) Exec(ctx context.Context) error {
	_, err := hu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hu *HashtagUpdate) ExecX(ctx context.Context) {
	if err := hu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (hu *HashtagUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   hashtag.Table,
			Columns: hashtag.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: hashtag.FieldID,
			},
		},
	}
	if ps := hu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hu.mutation.Hashtag(); ok {
		_spec.SetField(hashtag.FieldHashtag, field.TypeString, value)
	}
	if hu.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hashtag.PostsTable,
			Columns: hashtag.PostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: post.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.RemovedPostsIDs(); len(nodes) > 0 && !hu.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hashtag.PostsTable,
			Columns: hashtag.PostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: post.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hashtag.PostsTable,
			Columns: hashtag.PostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: post.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hashtag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// HashtagUpdateOne is the builder for updating a single Hashtag entity.
type HashtagUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HashtagMutation
}

// SetHashtag sets the "hashtag" field.
func (huo *HashtagUpdateOne) SetHashtag(s string) *HashtagUpdateOne {
	huo.mutation.SetHashtag(s)
	return huo
}

// AddPostIDs adds the "Posts" edge to the Post entity by IDs.
func (huo *HashtagUpdateOne) AddPostIDs(ids ...int) *HashtagUpdateOne {
	huo.mutation.AddPostIDs(ids...)
	return huo
}

// AddPosts adds the "Posts" edges to the Post entity.
func (huo *HashtagUpdateOne) AddPosts(p ...*Post) *HashtagUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return huo.AddPostIDs(ids...)
}

// Mutation returns the HashtagMutation object of the builder.
func (huo *HashtagUpdateOne) Mutation() *HashtagMutation {
	return huo.mutation
}

// ClearPosts clears all "Posts" edges to the Post entity.
func (huo *HashtagUpdateOne) ClearPosts() *HashtagUpdateOne {
	huo.mutation.ClearPosts()
	return huo
}

// RemovePostIDs removes the "Posts" edge to Post entities by IDs.
func (huo *HashtagUpdateOne) RemovePostIDs(ids ...int) *HashtagUpdateOne {
	huo.mutation.RemovePostIDs(ids...)
	return huo
}

// RemovePosts removes "Posts" edges to Post entities.
func (huo *HashtagUpdateOne) RemovePosts(p ...*Post) *HashtagUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return huo.RemovePostIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (huo *HashtagUpdateOne) Select(field string, fields ...string) *HashtagUpdateOne {
	huo.fields = append([]string{field}, fields...)
	return huo
}

// Save executes the query and returns the updated Hashtag entity.
func (huo *HashtagUpdateOne) Save(ctx context.Context) (*Hashtag, error) {
	var (
		err  error
		node *Hashtag
	)
	if len(huo.hooks) == 0 {
		node, err = huo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HashtagMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			huo.mutation = mutation
			node, err = huo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(huo.hooks) - 1; i >= 0; i-- {
			if huo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = huo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, huo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Hashtag)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from HashtagMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (huo *HashtagUpdateOne) SaveX(ctx context.Context) *Hashtag {
	node, err := huo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (huo *HashtagUpdateOne) Exec(ctx context.Context) error {
	_, err := huo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (huo *HashtagUpdateOne) ExecX(ctx context.Context) {
	if err := huo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (huo *HashtagUpdateOne) sqlSave(ctx context.Context) (_node *Hashtag, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   hashtag.Table,
			Columns: hashtag.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: hashtag.FieldID,
			},
		},
	}
	id, ok := huo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Hashtag.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := huo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hashtag.FieldID)
		for _, f := range fields {
			if !hashtag.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hashtag.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := huo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := huo.mutation.Hashtag(); ok {
		_spec.SetField(hashtag.FieldHashtag, field.TypeString, value)
	}
	if huo.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hashtag.PostsTable,
			Columns: hashtag.PostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: post.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.RemovedPostsIDs(); len(nodes) > 0 && !huo.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hashtag.PostsTable,
			Columns: hashtag.PostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: post.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hashtag.PostsTable,
			Columns: hashtag.PostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: post.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Hashtag{config: huo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, huo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hashtag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
