// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/MangoSteen0903/go-blog-graphql/ent/like"
)

// Like is the model entity for the Like schema.
type Like struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LikeQuery when eager-loading is set.
	Edges LikeEdges `json:"edges"`
}

// LikeEdges holds the relations/edges for other nodes in the graph.
type LikeEdges struct {
	// Posts holds the value of the Posts edge.
	Posts []*Post `json:"Posts,omitempty"`
	// Owner holds the value of the owner edge.
	Owner []*User `json:"owner,omitempty"`
	// Comments holds the value of the comments edge.
	Comments []*Comment `json:"comments,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedPosts    map[string][]*Post
	namedOwner    map[string][]*User
	namedComments map[string][]*Comment
}

// PostsOrErr returns the Posts value or an error if the edge
// was not loaded in eager-loading.
func (e LikeEdges) PostsOrErr() ([]*Post, error) {
	if e.loadedTypes[0] {
		return e.Posts, nil
	}
	return nil, &NotLoadedError{edge: "Posts"}
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading.
func (e LikeEdges) OwnerOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// CommentsOrErr returns the Comments value or an error if the edge
// was not loaded in eager-loading.
func (e LikeEdges) CommentsOrErr() ([]*Comment, error) {
	if e.loadedTypes[2] {
		return e.Comments, nil
	}
	return nil, &NotLoadedError{edge: "comments"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Like) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case like.FieldID:
			values[i] = new(sql.NullInt64)
		case like.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Like", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Like fields.
func (l *Like) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case like.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			l.ID = int(value.Int64)
		case like.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				l.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryPosts queries the "Posts" edge of the Like entity.
func (l *Like) QueryPosts() *PostQuery {
	return (&LikeClient{config: l.config}).QueryPosts(l)
}

// QueryOwner queries the "owner" edge of the Like entity.
func (l *Like) QueryOwner() *UserQuery {
	return (&LikeClient{config: l.config}).QueryOwner(l)
}

// QueryComments queries the "comments" edge of the Like entity.
func (l *Like) QueryComments() *CommentQuery {
	return (&LikeClient{config: l.config}).QueryComments(l)
}

// Update returns a builder for updating this Like.
// Note that you need to call Like.Unwrap() before calling this method if this Like
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Like) Update() *LikeUpdateOne {
	return (&LikeClient{config: l.config}).UpdateOne(l)
}

// Unwrap unwraps the Like entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Like) Unwrap() *Like {
	_tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Like is not a transactional entity")
	}
	l.config.driver = _tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Like) String() string {
	var builder strings.Builder
	builder.WriteString("Like(")
	builder.WriteString(fmt.Sprintf("id=%v, ", l.ID))
	builder.WriteString("created_at=")
	builder.WriteString(l.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedPosts returns the Posts named value or an error if the edge was not
// loaded in eager-loading with this name.
func (l *Like) NamedPosts(name string) ([]*Post, error) {
	if l.Edges.namedPosts == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := l.Edges.namedPosts[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (l *Like) appendNamedPosts(name string, edges ...*Post) {
	if l.Edges.namedPosts == nil {
		l.Edges.namedPosts = make(map[string][]*Post)
	}
	if len(edges) == 0 {
		l.Edges.namedPosts[name] = []*Post{}
	} else {
		l.Edges.namedPosts[name] = append(l.Edges.namedPosts[name], edges...)
	}
}

// NamedOwner returns the Owner named value or an error if the edge was not
// loaded in eager-loading with this name.
func (l *Like) NamedOwner(name string) ([]*User, error) {
	if l.Edges.namedOwner == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := l.Edges.namedOwner[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (l *Like) appendNamedOwner(name string, edges ...*User) {
	if l.Edges.namedOwner == nil {
		l.Edges.namedOwner = make(map[string][]*User)
	}
	if len(edges) == 0 {
		l.Edges.namedOwner[name] = []*User{}
	} else {
		l.Edges.namedOwner[name] = append(l.Edges.namedOwner[name], edges...)
	}
}

// NamedComments returns the Comments named value or an error if the edge was not
// loaded in eager-loading with this name.
func (l *Like) NamedComments(name string) ([]*Comment, error) {
	if l.Edges.namedComments == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := l.Edges.namedComments[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (l *Like) appendNamedComments(name string, edges ...*Comment) {
	if l.Edges.namedComments == nil {
		l.Edges.namedComments = make(map[string][]*Comment)
	}
	if len(edges) == 0 {
		l.Edges.namedComments[name] = []*Comment{}
	} else {
		l.Edges.namedComments[name] = append(l.Edges.namedComments[name], edges...)
	}
}

// Likes is a parsable slice of Like.
type Likes []*Like

func (l Likes) config(cfg config) {
	for _i := range l {
		l[_i].config = cfg
	}
}
