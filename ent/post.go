// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/MangoSteen0903/go-blog-graphql/ent/post"
	"github.com/MangoSteen0903/go-blog-graphql/ent/user"
)

// Post is the model entity for the Post schema.
type Post struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "Title" field.
	Title string `json:"Title,omitempty"`
	// Context holds the value of the "Context" field.
	Context string `json:"Context,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PostQuery when eager-loading is set.
	Edges      PostEdges `json:"edges"`
	user_posts *int
}

// PostEdges holds the relations/edges for other nodes in the graph.
type PostEdges struct {
	// Hashtags holds the value of the hashtags edge.
	Hashtags []*Hashtag `json:"hashtags,omitempty"`
	// Likes holds the value of the Likes edge.
	Likes []*Like `json:"Likes,omitempty"`
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedHashtags map[string][]*Hashtag
	namedLikes    map[string][]*Like
}

// HashtagsOrErr returns the Hashtags value or an error if the edge
// was not loaded in eager-loading.
func (e PostEdges) HashtagsOrErr() ([]*Hashtag, error) {
	if e.loadedTypes[0] {
		return e.Hashtags, nil
	}
	return nil, &NotLoadedError{edge: "hashtags"}
}

// LikesOrErr returns the Likes value or an error if the edge
// was not loaded in eager-loading.
func (e PostEdges) LikesOrErr() ([]*Like, error) {
	if e.loadedTypes[1] {
		return e.Likes, nil
	}
	return nil, &NotLoadedError{edge: "Likes"}
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PostEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[2] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Post) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case post.FieldID:
			values[i] = new(sql.NullInt64)
		case post.FieldTitle, post.FieldContext:
			values[i] = new(sql.NullString)
		case post.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case post.ForeignKeys[0]: // user_posts
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Post", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Post fields.
func (po *Post) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case post.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			po.ID = int(value.Int64)
		case post.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Title", values[i])
			} else if value.Valid {
				po.Title = value.String
			}
		case post.FieldContext:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Context", values[i])
			} else if value.Valid {
				po.Context = value.String
			}
		case post.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				po.CreatedAt = value.Time
			}
		case post.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_posts", value)
			} else if value.Valid {
				po.user_posts = new(int)
				*po.user_posts = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryHashtags queries the "hashtags" edge of the Post entity.
func (po *Post) QueryHashtags() *HashtagQuery {
	return (&PostClient{config: po.config}).QueryHashtags(po)
}

// QueryLikes queries the "Likes" edge of the Post entity.
func (po *Post) QueryLikes() *LikeQuery {
	return (&PostClient{config: po.config}).QueryLikes(po)
}

// QueryOwner queries the "owner" edge of the Post entity.
func (po *Post) QueryOwner() *UserQuery {
	return (&PostClient{config: po.config}).QueryOwner(po)
}

// Update returns a builder for updating this Post.
// Note that you need to call Post.Unwrap() before calling this method if this Post
// was returned from a transaction, and the transaction was committed or rolled back.
func (po *Post) Update() *PostUpdateOne {
	return (&PostClient{config: po.config}).UpdateOne(po)
}

// Unwrap unwraps the Post entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (po *Post) Unwrap() *Post {
	_tx, ok := po.config.driver.(*txDriver)
	if !ok {
		panic("ent: Post is not a transactional entity")
	}
	po.config.driver = _tx.drv
	return po
}

// String implements the fmt.Stringer.
func (po *Post) String() string {
	var builder strings.Builder
	builder.WriteString("Post(")
	builder.WriteString(fmt.Sprintf("id=%v, ", po.ID))
	builder.WriteString("Title=")
	builder.WriteString(po.Title)
	builder.WriteString(", ")
	builder.WriteString("Context=")
	builder.WriteString(po.Context)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(po.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedHashtags returns the Hashtags named value or an error if the edge was not
// loaded in eager-loading with this name.
func (po *Post) NamedHashtags(name string) ([]*Hashtag, error) {
	if po.Edges.namedHashtags == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := po.Edges.namedHashtags[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (po *Post) appendNamedHashtags(name string, edges ...*Hashtag) {
	if po.Edges.namedHashtags == nil {
		po.Edges.namedHashtags = make(map[string][]*Hashtag)
	}
	if len(edges) == 0 {
		po.Edges.namedHashtags[name] = []*Hashtag{}
	} else {
		po.Edges.namedHashtags[name] = append(po.Edges.namedHashtags[name], edges...)
	}
}

// NamedLikes returns the Likes named value or an error if the edge was not
// loaded in eager-loading with this name.
func (po *Post) NamedLikes(name string) ([]*Like, error) {
	if po.Edges.namedLikes == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := po.Edges.namedLikes[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (po *Post) appendNamedLikes(name string, edges ...*Like) {
	if po.Edges.namedLikes == nil {
		po.Edges.namedLikes = make(map[string][]*Like)
	}
	if len(edges) == 0 {
		po.Edges.namedLikes[name] = []*Like{}
	} else {
		po.Edges.namedLikes[name] = append(po.Edges.namedLikes[name], edges...)
	}
}

// Posts is a parsable slice of Post.
type Posts []*Post

func (po Posts) config(cfg config) {
	for _i := range po {
		po[_i].config = cfg
	}
}
